cmake_minimum_required(VERSION 3.13)
project(solution LANGUAGES CXX)
find_package(OpenGL REQUIRED)
find_package(GLUT REQUIRED)
if ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
    find_package(GLEW REQUIRED)
endif()
set(SRCS )
list(APPEND SRCS ${CMAKE_CURRENT_LIST_DIR}/framework.cpp)
list(APPEND SRCS ${CMAKE_CURRENT_LIST_DIR}/solution.cpp)
foreach(SRC IN LISTS SRCS)
    set_source_files_properties(${SRC} PROPERTIES LANGUAGE CXX)
endforeach()
add_executable(solution ${SRCS})
set_target_properties(solution PROPERTIES LINKER_LANGUAGE CXX)
target_compile_features(solution PRIVATE cxx_std_11)
if ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
    target_include_directories(solution PRIVATE ${CMAKE_CURRENT_LIST_DIR} ${OPENGL_INCLUDE_DIRS} ${GLUT_INCLUDE_DIR}/GL)
    target_link_libraries(solution ${OPENGL_LIBRARIES} GLUT::GLUT GLEW::GLEW)
    #add_custom_command(TARGET solution POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:GLUT::GLUT> ${CMAKE_INSTALL_PREFIX}/bin/)
    #add_custom_command(TARGET solution POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:GLEW::GLEW> ${CMAKE_INSTALL_PREFIX}/bin/)
else()
    target_include_directories(solution PRIVATE ${CMAKE_CURRENT_LIST_DIR} ${OPENGL_INCLUDE_DIRS} ${GLUT_INCLUDE_DIRS})
    target_link_libraries(solution ${OPENGL_LIBRARIES} ${GLUT_glut_LIBRARY})
    if (APPLE)
        target_link_libraries(solution ${GLUT_cocoa_LIBRARY})
    endif()
endif()
install(TARGETS solution)
